1
(define a "=============== Problem 8 viewable case =================")
a

 ; define + lambda (用para.做為(initialized)"local para") - complex - COND IF BEGIN AND OR (nested calls)
 ; + functional composition // functions 呼叫 functions
 
(clean-environment) ; first round, no error.

(define x1 3)(define x2 4)(define x3 5)
(define (Fcond x4 x1) 
        (cond ( (> x4 x1) 
                (+ x4 x1)
                ( if (< x4 x1)
                     (+ x4 x1 22)
                     (+ x4 x1 33)
                )
              ) 
              ( (< x4 x1) 
                (* x4 x1)
                ( if (< x4 x1)
                     (* x4 x1 2)
                     (* x4 x1 3)
                )
              )
              ( else 
                (- x4 x1)
                (if (= x4 x1)
                    (- x4 x1 20)
                    (- x4 x1 30)
                )
              );else
        );cond
);define
(define (Fif x1 x4 x3) 
        (if (>= x2 x3) 
            ( begin 
              (+ x1 x3) 
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (+ x1 x3 33)
                   (+ x1 x3 44)
              );if
            );begin
            ( begin 
              (- x3 x4)
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (- x3 x4 33)
                   (- x3 x4 44)
              );if
            );begin
        );if
);define
(define (Fbegin x3) 
        ( begin 
          ( begin (+ x1 x3) )
          ( begin (- x2 x3) )
          ( cond ( (> x3 x1) (+ x3 x1) ) 
                 ( (< x3 x1) (* x3 x1) )
                 ( else      (- x3 x1) )
          );cond
        );begin
);define
(define (Fand x4 x2 x5) 
        (and ( if ( > x1 0 )
                  ( < x1 40 )
                  ( > (- x1 x5) 27)
             )
             (> x4 x2) 
             (> x2 x5) 
             (> x5 0)
        );and
);define
(define (For x1 x4 x3) 
        (or (and 
              (> x1 50)
              (> x4 170)
            )
            (> x1 x4) 
            (> x4 x3) 
            (> x1 100) 
            (> x4 100) 
            (> x3 100)
        );or
);define

; (Fcond x1 x2)
; (Fcond x2 x3)
; (Fcond x1 x1)
; (Fif 30 40 50)
; (Fif x1 x2 x3)
; (Fif x3 x2 x1)
; (Fif x2 x2 80)
; (Fbegin x1)
; (Fbegin 80)
; (Fbegin x2)
; (Fand x3 x2 x1)(Fand x3 10 x1)(Fand 7 6 x2)(Fand 7 1 -7)
; (For 10 20 30)(For 1000 20 30)(For 30 40 20)(For x1 x2 x3)(For x2 x2 x2)(For x2 x1 20)

(Fcond (Fif x1 x2 x3) (Fcond (Fbegin 80) x2))
(Fcond (Fcond (Fbegin x1) x2) (Fif x1 x2 x3))
(Fif (Fbegin x2) (Fcond (Fif x1 x2 x3) (Fcond x2 x3)) (Fif (+ x1 x2) x2 x3))
(define (For x1 x4 x3) 
        (or (and 
              (> (Fif x1 x2 x3) 50)
              (> (Fif x2 x2 80) 170)
            )
            (> (Fif x1 x2 x3) (Fif x2 x2 80)) 
            (> x4 x3) 
            (> x1 100) 
            (> x4 100) 
            (> x3 100)
        );or
);define
(For 10 20 30)(For 1000 20 30)(For 30 40 20)(For x1 x2 x3)(For x2 x2 x2)(For x2 x1 20)
( define ( Flambda x1 )
         ( if ( > x1 0 )
              ( lambda ( x2 ) ( * ( Fcond x2 x3 
                                  );Fcond
                                  3 
                              );*
              );lambda
              ( lambda ( x3 ) ( * ( Fif ( Fcond x3 x1 
                                        );Fcond 
                                        x2 
                                        x3 
                                  );Fif
                                  2 
                              );*
              );lambda
         );if
);define
Flambda
( Flambda 10 )
( Flambda -10 )
( ( Flambda 10 ) x3 )
( ( Flambda -10 ) x3 )
( ( Flambda 10 ) ( ( Flambda -10 ) x3) )
( ( Flambda -10 ) ( ( Flambda 10 ) x3 ) )

(clean-environment) ; second round, with error

(define x1 3)(define x2 4)(define x3 5)
(define (Fcond x4 x1) ;    x4 is p1    x1 is p2
        (cond ( (> x4 x1) 
                ( if (< x4 x2)
                     (+ x4 x1 22)
                     ; (+ x4 x1 33) ; no return-value when p1 > p2 and p1 >= x2
                )                   ; but OK
                (+ x4 x1)
              ) 
              ( (< x4 x1) 
                ( if (< x4 x1)
                     (* x4 x1 2)
                     (* x4 x1 3)
                )
                (* x4 x1)
              )
              ( else 
                (- x4 x1)
                (if (= x4 x3)
                    (- x4 x1 20)
                    ; (- x4 x1 30) ; no return-value when p1 = p2 and p1 <> x3
                )                  ; result not OK
              );else
        );cond
);define
(define (Fif x1 x4 x3) ;      x1 is p1    x4 is p2    x3 is p3
        (if (>= x2 x3) 
            ( begin 
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (+ x1 x3 33)
                   ; (+ x1 x3 44) ; no return value when x2 >= p3 AND ( p1 <= 50 OR p2 <= 50 )
              );if                ; but OK
              ; (display-string "Hello\n")
              (+ x1 x3) 
            );begin
            ( begin 
              (- x3 x4)
              ; (display-string "Hi\n")
              ( if ( and ( > x1 50 ) ( > x4 50 ) )
                   (- x3 x4 33)
                   ; (- x3 x4 44) ; no return value when x2 < p3 AND ( p1 <= 50 OR p2 <= 50 )
              );if                ; result not OK
            );begin
        );if
);define
( define (Fbegin x3)  ;       x3 : p1
  ( begin 
    ( begin (+ x1 x3) )
    ( begin (- x2 x3) )
    ( cond ( (> x3 x1) (+ x3 x1) ) 
           ( (< x3 x1) (* x3 x1) )
           ; ( else      (- x3 x1) ) ; no return value when p1 = x1
    );cond                           ; but OK
  );begin
  ( begin 
    ( begin (+ x1 x3) )
    ( begin (- x2 x3) )
    ( cond ( (> x3 x1) (+ x3 x1) ) 
           ( (= x3 x1) (* x3 x1) )
           ; ( else      (- x3 x1) ) ; no return value when p1 < x1
    );cond                           ; result not OK
  );begin
);define
(define (Fand x4 x2 x5)  ;   x4 : p1    x2 : p2    x5 : p3
        (and ( if ( > x2 0 )
                  ( < x1 40 )
                  ; ( > (- x1 x5) 27) ; no return value when p2 <= 0
             )                        ; result not OK
             (> x4 x2) 
             (> x2 x5) 
             (> x5 0)
        );and
);define
(define (For x1 x4 x3) 
        (or (and 
              (> x1 50)
              (> x4 170)
            )
            (> x1 x4) 
            (> x4 x3) 
            (> x1 100) 
            (> x4 100) 
            (> x3 100)
        );or
);define

; (Fcond x1 x2)
; (Fcond x2 x3)
; (Fcond x1 x1)
; (Fif 30 40 50)
; (Fif x1 x2 x3)
; (Fif x3 x2 x1)
; (Fif x2 x2 80)
; (Fbegin x1)
; (Fbegin 80)
; (Fbegin x2)
; (Fand x3 x2 x1)(Fand x3 10 x1)(Fand 7 6 x2)(Fand 7 1 -7)
; (For 10 20 30)(For 1000 20 30)(For 30 40 20)(For x1 x2 x3)(For x2 x2 x2)(For x2 x1 20)


(Fcond x1 x2)
(Fcond x2 (- x2 1))
(Fcond x2 x3)
(Fcond x1 x1)
(Fcond (+ x3 1) (- (+ x3 2) 1))
(cons (Fcond x1 x1) 10)
;; (define temp1 70)(define temp2 80)(define temp3 (- x2 1))
;; (Fif 130 40 -50)
;; (Fif x1 x2 x3)
;; (Fif temp1 temp2 temp3)
;; (Fif x3 x2 x3)
;; (Fif (+ x2 51) (* 50 2) 8)
;; (Fbegin x1)
;; (Fbegin 80)
;; (Fbegin -80)
;; (Fbegin (- x2 (- x2 x1)))
;; (Fand x3 x2 x1)
;; (Fand x3 -10 x1)
;; (Fand 7 6 x2)
;; (Fand 7 (- x2 x2 3) -7)

; (Fcond (Fif x1 x2 x3) (Fcond (Fbegin 80) x2))
; (Fcond (Fcond (Fbegin x1) x2) (Fif x1 x2 x3))
; (Fif (Fbegin x2) (Fcond (Fif x1 x2 x3) (Fcond x2 x3)) (Fif (+ x1 x2) x2 x3))

; replacing >>(Fif x1 x2 x3)<< with >>(Fif temp1 temp2 temp3)<<
(define temp1 70)(define temp2 80)(define temp3 (- x2 1))
(Fcond (Fif temp1 temp2 temp3) (Fcond (Fbegin 80) x2))
(Fcond (Fcond (Fbegin x1) x2) (Fif temp1 temp2 temp3))
(Fif (Fbegin x2) (Fcond (Fif temp1 temp2 temp3) (Fcond x2 x3)) (Fif (+ x1 x2) x2 x3))

; (define (For x1 x4 x3) 
;         (or (and 
;               (> (Fif x1 x2 x3) 50)
;               (> (Fif x2 x2 80) 170)
;             )
;             (> (Fif x1 x2 x3) (Fif x2 x2 80)) 
;             (> x4 x3) 
;             (> x1 100) 
;             (> x4 100) 
;             (> x3 100)
;         );or
; );define

(define (For x1 x4 x3) 
        (or (and 
              (> (Fif temp1 temp2 temp3) 50)
              (> (Fif x1 x3 x4) 170)
            )
            (> (Fif temp1 temp2 temp3) (Fcond x2 (- x2 1))) 
            (> x3 x1) 
            (> x1 100) 
            (> x4 100) 
            (> x3 100)
        );or
);define

(For 7 20 30)(For 100 120 30)(For 30 40 120)(For x1 x2 x3)(For x2 x2 x2)(For x2 x1 20)
( define ( Flambda x1 )    ;    x1 : p1
  ( begin
    ( if ( > x1 40 )
         ( lambda ( x2 ) ( * ( Fcond x2 x3 
                             );Fcond
                             3 
                         );*
         );lambda
         ; ( lambda ( x3 ) ( * ( Fif ( Fcond x3 x1  ; no return value when p1 <= 40
         ;                           );Fcond        ; but OK
         ;                           x2 
         ;                           x3 
         ;                     );Fif
         ;                     2 
         ;                 );*
         ; );lambda
    );if
    ( if ( > x1 0 )
         ( lambda ( x2 ) ( * ( Fcond x2 x3 
                             );Fcond
                             3 
                         );*
         );lambda
         ( lambda ( x3 ) ( * ( Fif ( Fcond x3 x1 
                                   );Fcond 
                                   x2 
                                   x3 
                             );Fif
                             2 
                         );*
         );lambda
    );if
  );begin
);define
Flambda
( Flambda 10 )
( Flambda -10 )
( ( Flambda 10 ) x3 ) ; ok
( ( Flambda -10 ) x3 ) ; error
( ( Flambda 10 ) x1 ) ; ok
( ( Flambda -10 ) x1 ) ; error
( ( Flambda 10 ) ( ( Flambda -10 ) x3) )
( ( Flambda -10 ) ( ( Flambda 10 ) x3 ) )
( ( Flambda 10 ) ( ( Flambda 10 ) x3) )
( ( Flambda -10 ) ( ( Flambda -10 ) x3 ) )

(clean-environment)

( lambda )
( lambda x )   
( lambda x y z )
( lambda (x) y z       ; the evaluation of a lambda expression
                         ; produces an internal representation of a 
  )                      ; function
( lambda (x) )
( lambda () y )
( lambda (5) y )
( lambda () 5 )
( lambda () () )      ; a parameter-less function that returns 'nil'
( lambda () )
( lambda () (+ c 5)    ; defines a function without calling it
  )
( ( lambda () (+ c 5)  ; first, the internal representation of a function
    )                    ; is produced ; this internal representation
                         ; is "the evaluated result of the first argument"
                         ; once the binding of the first argument (of
                         ; the top-level list) is obtained and found
                         ; to be a function, that function is applied ;
  )
( ( lambda () (+ 5 5) (+ 5 6) 
    )
  )
( ( lambda () (+ 5 5) (+ c 6)
    )
    8
  )
( define a 2 )
( define f ( lambda (x) (+ x x c) ; the binding of 'f' is defined
             )                      ; to be the internal representation
  )                                 ; of a function
f
(f 1 2 3)
(f a)
(f b)
(define c f)
(c a)
(c a b)
( define c 10 )
(f a)
( f ( ( lambda (x y)
          (+ x y)
        )
        ( f a )
        8
      )
  )
(define x 20)
(define y 30)
(define g ( lambda (x)
              (* x (+ 5 x)
              )
            )
  )
(g (+ (g (f a)
        )
        c
     )
  )
( f ( ( lambda (x y)
          (+ x y)
        )
        ( f x )
        (* (- y x)
           (g c)
        )
      )
  )
( f ( ( lambda (x y)
          (+ x no)
        )
        ( f x )
        (* (- y x)
           (g why)
        )
      )
  )
( f ( ( lambda (x y)
          (+ x no)
        )
        ( f x )
        (* (- y x)
           (g c)
        )
      )
  )
( f ( ( lambda (x y)
          (+ x no)
        )
        ( f x )
        (* (- y x)
           (g c why)
        )
      )
  )
(define F 5)
(define G 10)
(+ F G)
(define F (lambda (x) (+ x x x)))
(+ (F 10) G)
(define F (car (cons car cdr)))
(+ (F (cons G G)) G)
(define H (lambda (x)
              (cond ( (= x 1) car )
                    ( (= x 2) cons )
                    ( (= x 3) cdr )
                    ( (= x 4) F )
                    ( (= x x) 100 ) ) ) )
( (H 2) 3 5 )
( (H 4) '(10 20 30))
(define F cdr)
( (H 4) '(10 20 30))
(+ ((H 1) '(10 20 30)) (H 2015))
(define (cadr x) (car (cdr x)))
(define global '(10 20 30))
(define (Try F) (F global))
(Try cadr)
(Try car)
(Try cdr)
(exit)